import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { supabase } from '@/integrations/supabase/client';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { FileUpload } from './FileUpload';
import { useToast } from '@/hooks/use-toast';
import { X } from 'lucide-react';

interface ProjectFormData {
  title: string;
  description: string;
  full_description?: string;
  purpose?: string;
  expected_impact?: string;
  associations: string;
}

interface ProjectFormProps {
  onClose: () => void;
  projectId?: string;
}

export const ProjectForm = ({ onClose, projectId }: ProjectFormProps) => {
  const { toast } = useToast();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');
  const [imageFile, setImageFile] = useState<File | null>(null);
  
  const { register, handleSubmit, formState: { errors }, setValue, watch } = useForm<ProjectFormData>({
    defaultValues: {
      title: '',
      description: '',
      full_description: '',
      purpose: '',
      expected_impact: '',
      associations: '',
    }
  });

  const handleImageUpload = (file: File) => {
    setImageFile(file);
  };

  const uploadImage = async (file: File): Promise<string | null> => {
    try {
      const fileExt = file.name.split('.').pop();
      const fileName = `${Date.now()}-${Math.random().toString(36).substring(2)}.${fileExt}`;
      const filePath = `projects/${fileName}`;

      const { error: uploadError } = await supabase.storage
        .from('project-images')
        .upload(filePath, file);

      if (uploadError) throw uploadError;

      const { data } = supabase.storage
        .from('project-images')
        .getPublicUrl(filePath);

      return data.publicUrl;
    } catch (error) {
      console.error('Error uploading image:', error);
      return null;
    }
  };

  const onSubmit = async (data: ProjectFormData) => {
    setIsSubmitting(true);
    setError('');

    try {
      let imageUrl = null;
      if (imageFile) {
        imageUrl = await uploadImage(imageFile);
      }

      const projectData = {
        title: data.title,
        description: data.description,
        full_description: data.full_description,
        image_path: imageUrl,
        purpose: data.purpose,
        expected_impact: data.expected_impact,
        associations: data.associations ? data.associations.split(',').map(s => s.trim()).filter(Boolean) : [],
        slug: null, // Will be auto-generated by database trigger
      };

      const { error } = await supabase
        .from('projects')
        .insert([projectData]);

      if (error) throw error;

      toast({
        title: 'Project created successfully',
        description: 'The project has been added to the showcase.',
      });

      onClose();
    } catch (err: any) {
      setError(err.message || 'Failed to create project');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
      <Card className="w-full max-w-2xl max-h-[90vh] overflow-auto">
        <CardHeader className="flex flex-row items-center justify-between">
          <CardTitle>Add New Project</CardTitle>
          <Button variant="ghost" size="icon" onClick={onClose}>
            <X className="h-4 w-4" />
          </Button>
        </CardHeader>
        
        <form onSubmit={handleSubmit(onSubmit)}>
          <CardContent className="space-y-6">
            {error && (
              <Alert variant="destructive">
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}

            <div className="space-y-2">
              <Label htmlFor="title">Project Title *</Label>
              <Input
                id="title"
                {...register('title', { required: 'Title is required' })}
                placeholder="Enter project title"
              />
              {errors.title && (
                <p className="text-sm text-destructive">{errors.title.message}</p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="description">Short Description *</Label>
              <Textarea
                id="description"
                {...register('description', { required: 'Description is required' })}
                placeholder="Brief project description (1-2 sentences)"
                rows={3}
              />
              {errors.description && (
                <p className="text-sm text-destructive">{errors.description.message}</p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="full_description">Full Description</Label>
              <Textarea
                id="full_description"
                {...register('full_description')}
                placeholder="Detailed project description..."
                rows={5}
              />
            </div>

            <div className="space-y-2">
              <Label>Project Image</Label>
              <FileUpload
                acceptedTypes="image/*"
                onFileSelect={handleImageUpload}
                bucketName="project-images"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="purpose">Purpose</Label>
              <Textarea
                id="purpose"
                {...register('purpose')}
                placeholder="What is the purpose of this project?"
                rows={3}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="expected_impact">Expected Impact</Label>
              <Textarea
                id="expected_impact"
                {...register('expected_impact')}
                placeholder="What impact do you expect this project to have?"
                rows={3}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="associations">Associations/Tags</Label>
              <Input
                id="associations"
                {...register('associations')}
                placeholder="Enter tags separated by commas (e.g., sustainability, innovation, art)"
              />
            </div>
          </CardContent>

          <CardFooter className="flex gap-3">
            <Button type="button" variant="outline" onClick={onClose}>
              Cancel
            </Button>
            <Button type="submit" disabled={isSubmitting}>
              {isSubmitting ? 'Creating...' : 'Create Project'}
            </Button>
          </CardFooter>
        </form>
      </Card>
    </div>
  );
};