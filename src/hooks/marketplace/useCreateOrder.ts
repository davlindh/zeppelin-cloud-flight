import { useMutation, useQueryClient } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import { useAuthenticatedUser } from "@/hooks/useAuthenticatedUser";
import { useErrorHandler } from "@/hooks/useErrorHandler";
import type { Database } from "@/integrations/supabase/types";

type OrderItemType = Database['public']['Enums']['order_item_type'];

export interface OrderItem {
  type: OrderItemType;
  id: string;
  title: string;
  quantity: number;
  unitPrice: number;
  variantId?: string;
  metadata?: Record<string, any>;
}

export interface CreateOrderInput {
  customerEmail: string;
  customerName: string;
  customerPhone?: string;
  subtotal: number;
  taxAmount: number;
  shippingAmount: number;
  discountAmount?: number;
  totalAmount: number;
  shippingAddress: Record<string, any>;
  billingAddress?: Record<string, any>;
  notes?: string;
  items: OrderItem[];
}

export const useCreateOrder = () => {
  const queryClient = useQueryClient();
  const { toast } = useToast();
  const { data: authenticatedUser } = useAuthenticatedUser();
  const { handleError } = useErrorHandler();

  return useMutation({
    mutationFn: async (orderData: CreateOrderInput) => {
      // 1. Create order
      // IMPORTANT: Ensure all numeric fields have defaults (not NULL) to pass RLS policy checks
      // Include user_id for authenticated users to enable proper order tracking
      // Do NOT include: status, paid_at, payment_status, etc. (database-controlled fields)
      // order_number is auto-generated by database trigger
      const orderToInsert: any = {
        customer_email: orderData.customerEmail,
        customer_name: orderData.customerName,
        customer_phone: orderData.customerPhone || null,
        subtotal: orderData.subtotal ?? 0,
        tax_amount: orderData.taxAmount ?? 0,
        shipping_amount: orderData.shippingAmount ?? 0,
        discount_amount: orderData.discountAmount ?? 0,
        total_amount: orderData.totalAmount ?? 0,
        shipping_address: orderData.shippingAddress,
        billing_address: orderData.billingAddress || null,
        customer_notes: orderData.notes || null,
      };

      // Add user_id for authenticated users
      if (authenticatedUser?.id) {
        orderToInsert.user_id = authenticatedUser.id;
      }

      const { data: order, error: orderError } = await supabase
        .from('orders')
        .insert(orderToInsert)
        .select()
        .single();
      
      if (orderError) throw orderError;
      
      // 2. Create order items
      // Note: Only insert allowed columns (metadata and variant_details are restricted)
      const itemsToInsert = orderData.items.map(item => ({
        order_id: order.id,
        item_type: item.type,
        item_id: item.id,
        item_title: item.title,
        item_sku: item.metadata?.sku || null, // Extract SKU if available
        variant_id: item.variantId || null,
        quantity: item.quantity,
        unit_price: item.unitPrice,
        total_price: item.quantity * item.unitPrice,
        tax_rate: 0, // Default tax rate, can be customized per item if needed
      }));
      
      const { error: itemsError } = await supabase
        .from('order_items')
        .insert(itemsToInsert);
      
      if (itemsError) throw itemsError;
      
      return order;
    },
    onSuccess: (order) => {
      toast({
        title: "Order Created",
        description: `Order ${order.order_number} has been created successfully.`,
      });
      queryClient.invalidateQueries({ queryKey: ['orders'] });
    },
    onError: (error: any) => {
      console.error('Order creation error:', error);
      // Use the standard error handler for order creation failures
      handleError(new Error('Unable to create your order. Please check your information and try again.'));
    }
  });
};
